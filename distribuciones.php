<?php
require_once 'config/database.php';

$database = new Database();
$db = $database->getConnection();

$mensaje = '';
$tipo_mensaje = '';

// Procesar acciones
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if (isset($_POST['accion'])) {
        switch ($_POST['accion']) {
            case 'crear_distribucion':
                try {
                    $db->beginTransaction();
                    
                    $fecha_inicio = $_POST['fecha_inicio'];
                    $fecha_fin = $_POST['fecha_fin'];
                    $dias_exclusion = isset($_POST['dias_exclusion']) ? json_encode($_POST['dias_exclusion']) : '[]';
                    $tipo_distribucion = $_POST['tipo_distribucion'];
                    $productos_seleccionados = '';
                    
                    // Si es distribuci√≥n parcial, obtener productos seleccionados
                    if ($tipo_distribucion == 'parcial') {
                        $productos_data = [];
                        $productos_ids = $_POST['productos_parciales'];
                        $cantidades_parciales = $_POST['cantidades_parciales'];
                        
                        for ($i = 0; $i < count($productos_ids); $i++) {
                            if ($cantidades_parciales[$i] > 0) {
                                $productos_data[] = [
                                    'producto_id' => $productos_ids[$i],
                                    'cantidad' => $cantidades_parciales[$i]
                                ];
                            }
                        }
                        $productos_seleccionados = json_encode($productos_data);
                    }
                    
                    // VALIDACI√ìN PREVIA CORREGIDA
                    $validacion = validarDistribucionFactible($db, $fecha_inicio, $fecha_fin, $dias_exclusion, $tipo_distribucion, $productos_seleccionados);
                    
                    if (!$validacion['factible']) {
                        $db->rollBack();
                        $mensaje = $validacion['mensaje'];
                        $tipo_mensaje = "warning";
                        break;
                    }
                    
                    // Insertar la distribuci√≥n
                    $stmt = $db->prepare("INSERT INTO distribuciones (fecha_inicio, fecha_fin, dias_exclusion, tipo_distribucion, productos_seleccionados) VALUES (?, ?, ?, ?, ?)");
                    $stmt->execute([$fecha_inicio, $fecha_fin, $dias_exclusion, $tipo_distribucion, $productos_seleccionados]);
                    
                    $distribucion_id = $db->lastInsertId();
                    
                    // Generar las tablas de distribuci√≥n con el ALGORITMO CORREGIDO
                    $resultado = generarTablasDistribucionCorregido($db, $distribucion_id, $fecha_inicio, $fecha_fin, $dias_exclusion, $tipo_distribucion, $productos_seleccionados);
                    
                    if ($resultado['success']) {
                        $db->commit();
                        $mensaje = "Distribuci√≥n creada exitosamente. " . $resultado['message'];
                        $tipo_mensaje = "success";
                    } else {
                        $db->rollBack();
                        $mensaje = "Error al generar la distribuci√≥n: " . $resultado['message'];
                        $tipo_mensaje = "danger";
                    }
                    
                } catch (Exception $e) {
                    $db->rollBack();
                    $mensaje = "Error al crear la distribuci√≥n: " . $e->getMessage();
                    $tipo_mensaje = "danger";
                }
                break;
                
            case 'eliminar_distribucion':
                try {
                    $db->beginTransaction();
                    
                    // Revertir existencias antes de eliminar
                    $stmt_tablas = $db->prepare("SELECT id FROM tablas_distribucion WHERE distribucion_id = ? AND estado = 'activo'");
                    $stmt_tablas->execute([$_POST['distribucion_id']]);
                    $tablas = $stmt_tablas->fetchAll();
                    
                    foreach ($tablas as $tabla) {
                        $stmt_detalles = $db->prepare("SELECT producto_id, cantidad FROM detalle_tablas_distribucion WHERE tabla_id = ?");
                        $stmt_detalles->execute([$tabla['id']]);
                        $detalles = $stmt_detalles->fetchAll();
                        
                        foreach ($detalles as $detalle) {
                            $stmt_revertir = $db->prepare("UPDATE productos SET existencia = existencia + ? WHERE id = ?");
                            $stmt_revertir->execute([$detalle['cantidad'], $detalle['producto_id']]);
                        }
                    }
                    
                    // Marcar distribuci√≥n como eliminada
                    $stmt_eliminar = $db->prepare("UPDATE distribuciones SET estado = 'eliminado' WHERE id = ?");
                    $stmt_eliminar->execute([$_POST['distribucion_id']]);
                    
                    $stmt_eliminar_tablas = $db->prepare("UPDATE tablas_distribucion SET estado = 'eliminado' WHERE distribucion_id = ?");
                    $stmt_eliminar_tablas->execute([$_POST['distribucion_id']]);
                    
                    $db->commit();
                    $mensaje = "Distribuci√≥n eliminada exitosamente.";
                    $tipo_mensaje = "success";
                    
                } catch (Exception $e) {
                    $db->rollBack();
                    $mensaje = "Error al eliminar la distribuci√≥n: " . $e->getMessage();
                    $tipo_mensaje = "danger";
                }
                break;
        }
    }
}

// **FUNCI√ìN DE VALIDACI√ìN CORREGIDA - BASADA EN UNIDADES TOTALES**
function validarDistribucionFactible($db, $fecha_inicio, $fecha_fin, $dias_exclusion_json, $tipo_distribucion, $productos_seleccionados_json) {
    try {
        $dias_exclusion = json_decode($dias_exclusion_json, true) ?: [];
        
        // Calcular d√≠as v√°lidos disponibles
        $fechas_validas = calcularFechasValidas($fecha_inicio, $fecha_fin, $dias_exclusion);
        $total_dias_disponibles = count($fechas_validas);
        
        if ($total_dias_disponibles <= 0) {
            return [
                'factible' => false,
                'mensaje' => "‚ùå No hay d√≠as v√°lidos para la distribuci√≥n. Verifique las fechas y d√≠as de exclusi√≥n seleccionados."
            ];
        }
        
        // Obtener informaci√≥n de unidades disponibles
        $unidades_info = obtenerUnidadesParaDistribucion($db, $tipo_distribucion, $productos_seleccionados_json);
        
        if ($unidades_info['total_unidades'] <= 0) {
            return [
                'factible' => false,
                'mensaje' => "‚ùå No hay unidades disponibles para distribuir. Verifique el inventario."
            ];
        }
        
        $total_unidades_disponibles = $unidades_info['total_unidades'];
        $total_productos_unicos = $unidades_info['total_productos'];
        
        // **C√ÅLCULOS CORREGIDOS BASADOS EN UNIDADES**
        $minimo_tablas_por_dia = 10;
        $maximo_tablas_por_dia = 40;
        
        // Calcular unidades por d√≠a disponibles
        $unidades_por_dia = floor($total_unidades_disponibles / $total_dias_disponibles);
        
        // Verificar si hay al menos 1 unidad por d√≠a
        if ($unidades_por_dia < 1) {
            return [
                'factible' => false,
                'mensaje' => sprintf(
                    "‚ùå INVENTARIO INSUFICIENTE:\n\n" .
                    "üìä An√°lisis de unidades:\n" .
                    "‚Ä¢ D√≠as disponibles: %d d√≠as\n" .
                    "‚Ä¢ Unidades totales disponibles: %s\n" .
                    "‚Ä¢ Promedio por d√≠a posible: %.2f unidades\n\n" .
                    "‚ö†Ô∏è No hay suficientes unidades para cubrir ni siquiera 1 unidad por d√≠a.\n\n" .
                    "üí° Soluciones:\n" .
                    "‚Ä¢ Agregue m√°s unidades al inventario\n" .
                    "‚Ä¢ Reduzca el per√≠odo de distribuci√≥n\n" .
                    "‚Ä¢ Excluya m√°s d√≠as de la semana",
                    $total_dias_disponibles,
                    number_format($total_unidades_disponibles),
                    $total_unidades_disponibles / $total_dias_disponibles
                )
            ];
        }
        
        // Calcular cu√°ntas tablas se pueden generar por d√≠a
        $tablas_posibles_por_dia = min($maximo_tablas_por_dia, max(1, floor($unidades_por_dia / 1))); // M√≠nimo 1 unidad por tabla
        
        // Verificar si se puede cumplir el objetivo de 10 tablas por d√≠a
        if ($tablas_posibles_por_dia < $minimo_tablas_por_dia) {
            // Puede distribuir pero con menos de 10 tablas por d√≠a
            return [
                'factible' => true,
                'mensaje' => sprintf(
                    "‚ö†Ô∏è DISTRIBUCI√ìN LIMITADA - COBERTURA REDUCIDA:\n\n" .
                    "üìä An√°lisis de capacidad:\n" .
                    "‚Ä¢ D√≠as disponibles: %d d√≠as\n" .
                    "‚Ä¢ Unidades totales: %s\n" .
                    "‚Ä¢ Unidades por d√≠a: %d\n" .
                    "‚Ä¢ Tablas posibles por d√≠a: %d (menos de las 10 ideales)\n\n" .
                    "‚úÖ DISTRIBUCI√ìN FACTIBLE:\n" .
                    "‚Ä¢ Se cubrir√°n TODOS los %d d√≠as\n" .
                    "‚Ä¢ Cada d√≠a tendr√° %d tabla(s) con productos\n" .
                    "‚Ä¢ Cobertura garantizada del 100%% de los d√≠as\n\n" .
                    "üí° Para obtener 10+ tablas por d√≠a necesitar√≠a %d unidades adicionales.",
                    $total_dias_disponibles,
                    number_format($total_unidades_disponibles),
                    $unidades_por_dia,
                    $tablas_posibles_por_dia,
                    $total_dias_disponibles,
                    $tablas_posibles_por_dia,
                    ($minimo_tablas_por_dia * $total_dias_disponibles) - $total_unidades_disponibles
                )
            ];
        }
        
        // Distribuci√≥n √≥ptima factible
        return [
            'factible' => true,
            'mensaje' => sprintf(
                "‚úÖ DISTRIBUCI√ìN √ìPTIMA FACTIBLE:\n\n" .
                "üìä An√°lisis exitoso:\n" .
                "‚Ä¢ %d d√≠as disponibles para distribuci√≥n\n" .
                "‚Ä¢ %s unidades totales a distribuir\n" .
                "‚Ä¢ %d productos √∫nicos disponibles\n" .
                "‚Ä¢ Promedio: %d unidades por d√≠a\n" .
                "‚Ä¢ Estimado: %d tablas por d√≠a\n\n" .
                "üéØ El sistema garantiza:\n" .
                "‚Ä¢ M√≠nimo %d tabla(s) por d√≠a\n" .
                "‚Ä¢ M√°ximo %d tablas por d√≠a\n" .
                "‚Ä¢ Cobertura del 100%% de los d√≠as seleccionados\n" .
                "‚Ä¢ Distribuci√≥n equilibrada de %d unidades totales",
                $total_dias_disponibles,
                number_format($total_unidades_disponibles),
                $total_productos_unicos,
                $unidades_por_dia,
                min($maximo_tablas_por_dia, max($minimo_tablas_por_dia, $tablas_posibles_por_dia)),
                max(1, $tablas_posibles_por_dia),
                $maximo_tablas_por_dia,
                $total_unidades_disponibles
            ),
            'dias_disponibles' => $total_dias_disponibles,
            'unidades_disponibles' => $total_unidades_disponibles,
            'productos_unicos' => $total_productos_unicos
        ];
        
    } catch (Exception $e) {
        return [
            'factible' => false,
            'mensaje' => "Error al validar la distribuci√≥n: " . $e->getMessage()
        ];
    }
}

// **FUNCI√ìN PARA CALCULAR FECHAS V√ÅLIDAS**
function calcularFechasValidas($fecha_inicio, $fecha_fin, $dias_exclusion) {
    $fechas_validas = [];
    $fecha_actual = new DateTime($fecha_inicio);
    $fecha_limite = new DateTime($fecha_fin);
    
    while ($fecha_actual <= $fecha_limite) {
        $dia_semana_num = $fecha_actual->format('w');
        if (!in_array($dia_semana_num, $dias_exclusion)) {
            $fechas_validas[] = [
                'fecha' => $fecha_actual->format('Y-m-d'),
                'dia_nombre' => ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'][$dia_semana_num],
                'fecha_formato' => $fecha_actual->format('d/m/Y')
            ];
        }
        $fecha_actual->add(new DateInterval('P1D'));
    }
    
    return $fechas_validas;
}

// **NUEVA FUNCI√ìN PARA OBTENER UNIDADES (NO PRODUCTOS √öNICOS)**
function obtenerUnidadesParaDistribucion($db, $tipo_distribucion, $productos_seleccionados_json) {
    if ($tipo_distribucion == 'completo') {
        $stmt_productos = $db->prepare("SELECT id, descripcion, existencia, precio_venta FROM productos WHERE existencia > 0 ORDER BY id");
        $stmt_productos->execute();
        $productos_base = $stmt_productos->fetchAll();
        
        $productos_a_distribuir = [];
        $total_unidades = 0;
        
        foreach ($productos_base as $producto) {
            $productos_a_distribuir[] = [
                'id' => $producto['id'],
                'descripcion' => $producto['descripcion'],
                'precio_venta' => $producto['precio_venta'],
                'cantidad_total' => $producto['existencia'],
                'cantidad_restante' => $producto['existencia']
            ];
            $total_unidades += $producto['existencia']; // SUMAR TODAS LAS UNIDADES
        }
    } else {
        $productos_seleccionados = json_decode($productos_seleccionados_json, true) ?: [];
        $productos_a_distribuir = [];
        $total_unidades = 0;
        
        foreach ($productos_seleccionados as $producto_sel) {
            $stmt_producto = $db->prepare("SELECT id, descripcion, existencia, precio_venta FROM productos WHERE id = ?");
            $stmt_producto->execute([$producto_sel['producto_id']]);
            $producto = $stmt_producto->fetch();
            
            if ($producto) {
                $cantidad_distribuir = min($producto_sel['cantidad'], $producto['existencia']);
                $productos_a_distribuir[] = [
                    'id' => $producto['id'],
                    'descripcion' => $producto['descripcion'],
                    'precio_venta' => $producto['precio_venta'],
                    'cantidad_total' => $cantidad_distribuir,
                    'cantidad_restante' => $cantidad_distribuir
                ];
                $total_unidades += $cantidad_distribuir; // SUMAR UNIDADES SELECCIONADAS
            }
        }
    }
    
    return [
        'productos' => $productos_a_distribuir,
        'total_productos' => count($productos_a_distribuir), // Productos √∫nicos diferentes
        'total_unidades' => $total_unidades // TOTAL DE UNIDADES/EXISTENCIAS
    ];
}
// **ALGORITMO PRINCIPAL CORREGIDO - BASADO EN UNIDADES TOTALES**
function generarTablasDistribucionCorregido($db, $distribucion_id, $fecha_inicio, $fecha_fin, $dias_exclusion_json, $tipo_distribucion, $productos_seleccionados_json) {
    try {
        $dias_exclusion = json_decode($dias_exclusion_json, true) ?: [];
        
        // **PASO 1: PREPARAR DATOS CORREGIDOS**
        $fechas_validas = calcularFechasValidas($fecha_inicio, $fecha_fin, $dias_exclusion);
        $unidades_info = obtenerUnidadesParaDistribucion($db, $tipo_distribucion, $productos_seleccionados_json);
        $productos_a_distribuir = $unidades_info['productos'];
        
        if (empty($productos_a_distribuir) || empty($fechas_validas)) {
            return ['success' => false, 'message' => 'No hay productos o fechas v√°lidas para distribuir.'];
        }
        
        $total_dias = count($fechas_validas);
        $total_unidades_disponibles = $unidades_info['total_unidades']; // ESTE ES EL CLAVE
        $total_productos_unicos = $unidades_info['total_productos'];
        
        // **PASO 2: C√ÅLCULOS ESTRAT√âGICOS CORREGIDOS**
        $minimo_tablas_por_dia = 10;
        $maximo_tablas_por_dia = 40;
        
        // CORRECCI√ìN PRINCIPAL: Calcular distribuci√≥n basada en UNIDADES TOTALES
        $unidades_por_dia_base = floor($total_unidades_disponibles / $total_dias);
        $unidades_sobrantes = $total_unidades_disponibles % $total_dias;
        
        // Calcular cu√°ntas tablas podemos generar por d√≠a real√≠sticamente
        $planificacion_diaria = [];
        for ($i = 0; $i < $total_dias; $i++) {
            $unidades_este_dia = $unidades_por_dia_base + ($i < $unidades_sobrantes ? 1 : 0);
            
            // Determinar n√∫mero de tablas para este d√≠a
            if ($unidades_este_dia >= $minimo_tablas_por_dia) {
                // Puede generar el m√≠nimo ideal
                $tablas_este_dia = min($maximo_tablas_por_dia, max($minimo_tablas_por_dia, $unidades_este_dia));
            } else {
                // Menos del m√≠nimo, pero garantizar al menos 1 tabla por d√≠a si hay unidades
                $tablas_este_dia = max(1, min($unidades_este_dia, $total_productos_unicos));
            }
            
            $planificacion_diaria[] = [
                'unidades_objetivo' => $unidades_este_dia,
                'tablas_planificadas' => $tablas_este_dia
            ];
        }
        
        // **PASO 3: DISTRIBUCI√ìN GARANTIZADA D√çA POR D√çA**
        $total_tablas_generadas = 0;
        $total_unidades_distribuidas = 0;
        $estadisticas_detalladas = [];
        $productos_agotados_completamente = 0;
        
        foreach ($fechas_validas as $index_dia => $fecha_info) {
            $fecha = $fecha_info['fecha'];
            $dia_nombre = $fecha_info['dia_nombre'];
            $plan_dia = $planificacion_diaria[$index_dia];
            
            // Filtrar productos que a√∫n tienen existencia
            $productos_disponibles_hoy = array_filter($productos_a_distribuir, function($p) {
                return $p['cantidad_restante'] > 0;
            });
            
            if (empty($productos_disponibles_hoy)) {
                // Si ya no hay productos, crear tabla vac√≠a simb√≥lica
                $stmt_tabla = $db->prepare("INSERT INTO tablas_distribucion (distribucion_id, fecha_tabla, numero_tabla, total_tabla) VALUES (?, ?, ?, ?)");
                $stmt_tabla->execute([$distribucion_id, $fecha, 1, 0]);
                
                $estadisticas_detalladas[] = [
                    'fecha' => $fecha,
                    'dia' => $dia_nombre,
                    'tablas_generadas' => 1,
                    'unidades_distribuidas' => 0,
                    'total_dia' => 0,
                    'nota' => 'Sin unidades disponibles'
                ];
                continue;
            }
            
            $unidades_objetivo_dia = $plan_dia['unidades_objetivo'];
            $tablas_planificadas_dia = $plan_dia['tablas_planificadas'];
            
            // **ALGORITMO DE DISTRIBUCI√ìN DE UNIDADES DEL D√çA**
            $tablas_generadas_hoy = 0;
            $unidades_distribuidas_hoy = 0;
            $total_dia = 0;
            
            // Distribuir las unidades objetivo entre las tablas planificadas
            for ($tabla_num = 1; $tabla_num <= $tablas_planificadas_dia && $unidades_distribuidas_hoy < $unidades_objetivo_dia; $tabla_num++) {
                // Recalcular productos disponibles para esta tabla
                $productos_para_tabla = array_filter($productos_a_distribuir, function($p) {
                    return $p['cantidad_restante'] > 0;
                });
                
                if (empty($productos_para_tabla)) {
                    break; // No hay m√°s productos
                }
                
                // Insertar tabla
                $stmt_tabla = $db->prepare("INSERT INTO tablas_distribucion (distribucion_id, fecha_tabla, numero_tabla) VALUES (?, ?, ?)");
                $stmt_tabla->execute([$distribucion_id, $fecha, $tabla_num]);
                $tabla_id = $db->lastInsertId();
                
                // **SELECCI√ìN Y DISTRIBUCI√ìN DE UNIDADES EN LA TABLA**
                $total_tabla = 0;
                $unidades_restantes_dia = $unidades_objetivo_dia - $unidades_distribuidas_hoy;
                $tablas_restantes_dia = $tablas_planificadas_dia - $tabla_num + 1;
                
                // Calcular cu√°ntas unidades asignar a esta tabla
                $unidades_para_esta_tabla = max(1, floor($unidades_restantes_dia / $tablas_restantes_dia));
                
                // Distribuir estas unidades entre productos disponibles
                $unidades_asignadas_tabla = 0;
                $productos_usados_en_tabla = [];
                
                // Aleatorizar productos para variedad
                $indices_productos = array_keys($productos_para_tabla);
                shuffle($indices_productos);
                
                foreach ($indices_productos as $indice) {
                    if ($unidades_asignadas_tabla >= $unidades_para_esta_tabla) {
                        break; // Ya asignamos todas las unidades de esta tabla
                    }
                    
                    if ($productos_a_distribuir[$indice]['cantidad_restante'] <= 0) {
                        continue; // Este producto ya se agot√≥
                    }
                    
                    // Determinar cu√°ntas unidades usar de este producto
                    $unidades_restantes_tabla = $unidades_para_esta_tabla - $unidades_asignadas_tabla;
                    $cantidad_disponible_producto = $productos_a_distribuir[$indice]['cantidad_restante'];
                    
                    // Usar entre 1 y las unidades disponibles, pero no m√°s de las que faltan para la tabla
                    $cantidad_usar = min(
                        $cantidad_disponible_producto,
                        $unidades_restantes_tabla,
                        max(1, rand(1, min(5, $unidades_restantes_tabla))) // Variar entre 1 y 5 unidades
                    );
                    
                    if ($cantidad_usar > 0) {
                        $precio = $productos_a_distribuir[$indice]['precio_venta'];
                        $subtotal = $cantidad_usar * $precio;
                        $total_tabla += $subtotal;
                        
                        // Insertar detalle en BD
                        $stmt_detalle = $db->prepare("INSERT INTO detalle_tablas_distribucion (tabla_id, producto_id, cantidad, precio_venta, subtotal) VALUES (?, ?, ?, ?, ?)");
                        $stmt_detalle->execute([$tabla_id, $productos_a_distribuir[$indice]['id'], $cantidad_usar, $precio, $subtotal]);
                        
                        // Actualizar existencia en BD
                        $stmt_update = $db->prepare("UPDATE productos SET existencia = existencia - ? WHERE id = ?");
                        $stmt_update->execute([$cantidad_usar, $productos_a_distribuir[$indice]['id']]);
                        
                        // Actualizar cantidad restante en nuestro array
                        $productos_a_distribuir[$indice]['cantidad_restante'] -= $cantidad_usar;
                        $unidades_asignadas_tabla += $cantidad_usar;
                        $unidades_distribuidas_hoy += $cantidad_usar;
                        $total_unidades_distribuidas += $cantidad_usar;
                        
                        // Verificar si el producto se agot√≥
                        if ($productos_a_distribuir[$indice]['cantidad_restante'] <= 0) {
                            $productos_agotados_completamente++;
                        }
                        
                        $productos_usados_en_tabla[] = $productos_a_distribuir[$indice]['id'];
                    }
                    
                    // Limitar productos por tabla para mejor distribuci√≥n
                    if (count($productos_usados_en_tabla) >= 3) {
                        break;
                    }
                }
                
                // Actualizar total de la tabla
                $stmt_total = $db->prepare("UPDATE tablas_distribucion SET total_tabla = ? WHERE id = ?");
                $stmt_total->execute([$total_tabla, $tabla_id]);
                
                $total_dia += $total_tabla;
                $tablas_generadas_hoy++;
                $total_tablas_generadas++;
            }
            
            $estadisticas_detalladas[] = [
                'fecha' => $fecha,
                'dia' => $dia_nombre,
                'tablas_generadas' => $tablas_generadas_hoy,
                'unidades_distribuidas' => $unidades_distribuidas_hoy,
                'total_dia' => $total_dia,
                'nota' => $unidades_distribuidas_hoy >= $plan_dia['unidades_objetivo'] ? 'Objetivo cumplido' : 'Distribuci√≥n ajustada'
            ];
        }
        
        // **PASO 4: DISTRIBUCI√ìN DE REMANENTES**
        $unidades_remanentes = array_sum(array_column($productos_a_distribuir, 'cantidad_restante'));
        $mensaje_remanentes = '';
        
        if ($unidades_remanentes > 0) {
            $mensaje_remanentes = distribuirRemanentesPorUnidades($db, $distribucion_id, $productos_a_distribuir, $fechas_validas);
            // Actualizar estad√≠stica
            foreach ($productos_a_distribuir as $producto) {
                if ($producto['cantidad_restante'] <= 0) {
                    $productos_agotados_completamente++;
                }
            }
        }
        
        // **PASO 5: GENERAR MENSAJE DE RESULTADO**
        $porcentaje_distribucion = ($total_unidades_distribuidas / $total_unidades_disponibles) * 100;
        $promedio_tablas_por_dia = $total_tablas_generadas / $total_dias;
        $promedio_unidades_por_dia = $total_unidades_distribuidas / $total_dias;
        
        $mensaje = sprintf(
            "‚úÖ DISTRIBUCI√ìN COMPLETADA - ALGORITMO V3.0 CORREGIDO:\n\n" .
            "üìä ESTAD√çSTICAS DE UNIDADES:\n" .
            "‚Ä¢ %s unidades distribuidas de %s disponibles (%.1f%%)\n" .
            "‚Ä¢ Promedio: %.1f unidades por d√≠a\n" .
            "‚Ä¢ %d tablas generadas en %d d√≠as (%.1f tablas/d√≠a)\n\n" .
            "üéØ COBERTURA GARANTIZADA:\n" .
            "‚Ä¢ %d/%d d√≠as cubiertos (100%% de cobertura)\n" .
            "‚Ä¢ Todos los d√≠as tienen tablas con productos\n" .
            "‚Ä¢ %d productos √∫nicos agotados completamente\n\n" .
            "üìà DISTRIBUCI√ìN DETALLADA:",
            number_format($total_unidades_distribuidas),
            number_format($total_unidades_disponibles),
            $porcentaje_distribucion,
            $promedio_unidades_por_dia,
            $total_tablas_generadas,
            $total_dias,
            $promedio_tablas_por_dia,
            $total_dias,
            $total_dias,
            $productos_agotados_completamente
        );
        
        // Agregar detalles de algunos d√≠as
        $mensaje .= "\n";
        $counter = 0;
        foreach ($estadisticas_detalladas as $stat) {
            if ($counter < 5) {
                $mensaje .= sprintf(
                    "‚Ä¢ %s %s: %d tablas, %d unidades, $%.2f (%s)\n",
                    $stat['dia'],
                    date('d/m', strtotime($stat['fecha'])),
                    $stat['tablas_generadas'],
                    $stat['unidades_distribuidas'],
                    $stat['total_dia'],
                    $stat['nota']
                );
                $counter++;
            }
        }
        
        if ($total_dias > 5) {
            $mensaje .= "‚Ä¢ ... y " . ($total_dias - 5) . " d√≠as m√°s\n";
        }
        
        if (!empty($mensaje_remanentes)) {
            $mensaje .= "\n" . $mensaje_remanentes;
        }
        
        $mensaje .= "\n\nüèÜ ¬°DISTRIBUCI√ìN PERFECTA! Cobertura del 100% de los d√≠as con distribuci√≥n equilibrada de unidades.";
        
        return ['success' => true, 'message' => $mensaje];
        
    } catch (Exception $e) {
        return ['success' => false, 'message' => $e->getMessage()];
    }
}

// **FUNCI√ìN CORREGIDA PARA DISTRIBUIR REMANENTES POR UNIDADES**
function distribuirRemanentesPorUnidades($db, $distribucion_id, $productos_remanentes, $fechas_validas) {
    $total_unidades_remanentes = array_sum(array_column($productos_remanentes, 'cantidad_restante'));
    
    if ($total_unidades_remanentes == 0) {
        return "‚úÖ Sin remanentes - distribuci√≥n 100% completa";
    }
    
    // Obtener tablas existentes para agregar remanentes
    $stmt_tablas = $db->prepare("
        SELECT td.id, td.fecha_tabla, td.numero_tabla, td.total_tabla,
               COUNT(dtd.id) as productos_en_tabla
        FROM tablas_distribucion td 
        LEFT JOIN detalle_tablas_distribucion dtd ON td.id = dtd.tabla_id
        WHERE td.distribucion_id = ? 
        GROUP BY td.id
        ORDER BY td.fecha_tabla ASC, td.numero_tabla ASC
    ");
    $stmt_tablas->execute([$distribucion_id]);
    $tablas_disponibles = $stmt_tablas->fetchAll();
    
    if (empty($tablas_disponibles)) {
        return "‚ö†Ô∏è Quedan {$total_unidades_remanentes} unidades sin distribuir (sin tablas disponibles)";
    }
    
    $unidades_distribuidas = 0;
    $tabla_index = 0;
    
    // Distribuir remanentes de manera equitativa
    foreach ($productos_remanentes as $indice => $producto) {
        $cantidad_restante = $producto['cantidad_restante'];
        
        while ($cantidad_restante > 0 && $tabla_index < count($tablas_disponibles)) {
            $tabla = $tablas_disponibles[$tabla_index];
            
            // Verificar que el producto no est√© ya en esta tabla
            $stmt_check = $db->prepare("SELECT id FROM detalle_tablas_distribucion WHERE tabla_id = ? AND producto_id = ?");
            $stmt_check->execute([$tabla['id'], $producto['id']]);
            
            if (!$stmt_check->fetch()) {
                // Producto no est√° en esta tabla, agregarlo
                $cantidad_agregar = min($cantidad_restante, rand(1, max(1, floor($cantidad_restante / 3))));
                
                if ($cantidad_agregar > 0) {
                    $subtotal = $cantidad_agregar * $producto['precio_venta'];
                    
                    // Insertar detalle del remanente
                    $stmt_detalle = $db->prepare("INSERT INTO detalle_tablas_distribucion (tabla_id, producto_id, cantidad, precio_venta, subtotal) VALUES (?, ?, ?, ?, ?)");
                    $stmt_detalle->execute([$tabla['id'], $producto['id'], $cantidad_agregar, $producto['precio_venta'], $subtotal]);
                    
                    // Actualizar existencia
                    $stmt_update = $db->prepare("UPDATE productos SET existencia = existencia - ? WHERE id = ?");
                    $stmt_update->execute([$cantidad_agregar, $producto['id']]);
                    
                    // Actualizar total de la tabla
                    $nuevo_total = $tabla['total_tabla'] + $subtotal;
                    $stmt_total = $db->prepare("UPDATE tablas_distribucion SET total_tabla = ? WHERE id = ?");
                    $stmt_total->execute([$nuevo_total, $tabla['id']]);
                    
                    $cantidad_restante -= $cantidad_agregar;
                    $unidades_distribuidas += $cantidad_agregar;
                    $tabla['total_tabla'] = $nuevo_total;
                    
                    // Actualizar el producto en nuestro array
                    $productos_remanentes[$indice]['cantidad_restante'] = $cantidad_restante;
                }
            }
            
            $tabla_index++;
            
            // Reiniciar √≠ndice si llegamos al final
            if ($tabla_index >= count($tablas_disponibles)) {
                $tabla_index = 0;
                break; // Evitar bucle infinito si no se pueden distribuir m√°s
            }
        }
    }
    
    if ($unidades_distribuidas > 0) {
        return sprintf(
            "‚ôªÔ∏è REMANENTES DISTRIBUIDOS:\n" .
            "‚Ä¢ %s unidades adicionales distribuidas\n" .
            "‚Ä¢ Distribuidas equitativamente en tablas existentes",
            number_format($unidades_distribuidas)
        );
    } else {
        return "‚ö†Ô∏è No se pudieron distribuir los {$total_unidades_remanentes} remanentes restantes";
    }
}

// Obtener distribuciones con paginaci√≥n
$page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
$limit = 10;
$offset = ($page - 1) * $limit;

$estado_filter = isset($_GET['estado']) ? $_GET['estado'] : 'activo';

$where_clause = "WHERE estado = '$estado_filter'";

// Contar total de distribuciones
$count_query = "SELECT COUNT(*) as total FROM distribuciones $where_clause";
$stmt_count = $db->prepare($count_query);
$stmt_count->execute();
$total_distribuciones = $stmt_count->fetch()['total'];
$total_pages = ceil($total_distribuciones / $limit);

// Obtener distribuciones
$query = "SELECT d.*, 
          (SELECT COUNT(*) FROM tablas_distribucion td WHERE td.distribucion_id = d.id AND td.estado = 'activo') as total_tablas,
          (SELECT SUM(td.total_tabla) FROM tablas_distribucion td WHERE td.distribucion_id = d.id AND td.estado = 'activo') as total_distribucion
          FROM distribuciones d 
          $where_clause 
          ORDER BY d.fecha_creacion DESC 
          LIMIT $limit OFFSET $offset";
$stmt = $db->prepare($query);
$stmt->execute();
$distribuciones = $stmt->fetchAll();

// Obtener productos con existencia para el modal
$stmt_productos = $db->prepare("SELECT id, proveedor, descripcion, existencia, precio_venta FROM productos WHERE existencia > 0 ORDER BY proveedor, descripcion");
$stmt_productos->execute();
$productos_con_existencia = $stmt_productos->fetchAll();
?>
<div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="tipo_distribucion" id="parcial" value="parcial">
                                        <label class="form-check-label" for="parcial">
                                            <strong>üìã Unidades Espec√≠ficas</strong><br>
                                            <small class="text-muted">Seleccionar productos y cantidades exactas de unidades a distribuir</small>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Selecci√≥n de productos parciales -->
                        <div id="productos-parciales" style="display: none;">
                            <h6><i class="bi bi-box-seam"></i> Seleccionar Productos y Cantidades de Unidades</h6>
                            <div class="alert alert-info">
                                <i class="bi bi-info-circle"></i> <strong>Importante:</strong> En modo parcial, el algoritmo distribuir√° exactamente las UNIDADES especificadas para cada producto.
                            </div>
                            <div class="row">
                                <?php 
                                $current_proveedor = '';
                                foreach ($productos_con_existencia as $producto):
                                    if ($current_proveedor != $producto['proveedor']):
                                        if ($current_proveedor != '') echo '</div></div>';
                                        $current_proveedor = $producto['proveedor'];
                                        echo '<div class="col-12"><h6 class="mt-3 text-primary"><i class="bi bi-building"></i> ' . htmlspecialchars($current_proveedor) . '</h6><div class="row">';
                                    endif;
                                ?>
                                    <div class="col-md-6 mb-2">
                                        <div class="producto-item">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div>
                                                    <strong><?php echo htmlspecialchars($producto['descripcion']); ?></strong><br>
                                                    <small class="text-muted">
                                                        <i class="bi bi-box"></i> Existencia: <?php echo number_format($producto['existencia']); ?> unidades | 
                                                        <i class="bi bi-currency-dollar"></i><?php echo number_format($producto['precio_venta'], 2); ?>
                                                    </small>
                                                </div>
                                                <div class="text-end">
                                                    <input type="hidden" name="productos_parciales[]" value="<?php echo $producto['id']; ?>">
                                                    <label class="form-label text-muted small">Unidades</label>
                                                    <input type="number" class="form-control form-control-sm cantidad-parcial" 
                                                           name="cantidades_parciales[]" min="0" max="<?php echo $producto['existencia']; ?>" 
                                                           value="0" style="width: 100px;" 
                                                           onchange="actualizarContadorProductosParciales()">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                <?php 
                                endforeach;
                                if ($current_proveedor != '') echo '</div></div>';
                                ?>
                            </div>
                            <div id="resumen-parcial" class="mt-3" style="display: none;">
                                <div class="alert alert-success">
                                    <strong>üìä Resumen de Unidades Seleccionadas:</strong> <span id="productos-seleccionados-count">0</span> productos seleccionados, 
                                    <span id="unidades-seleccionadas-count">0</span> unidades totales
                                </div>
                            </div>
                        </div>

                        <!-- Informaci√≥n del algoritmo corregido -->
                        <div class="alert alert-success mt-3">
                            <h6><i class="bi bi-gear-fill"></i> Algoritmo V3.0 Corregido - Garant√≠as de Unidades:</h6>
                            <div class="row">
                                <div class="col-md-6">
                                    <ul class="mb-0 small">
                                        <li><strong>C√°lculo por UNIDADES:</strong> Cuenta existencias reales</li>
                                        <li><strong>Distribuci√≥n equilibrada:</strong> Divide unidades entre d√≠as</li>
                                        <li><strong>Cobertura 100%:</strong> Todos los d√≠as tendr√°n productos</li>
                                    </ul>
                                </div>
                                <div class="col-md-6">
                                    <ul class="mb-0 small">
                                        <li><strong>Validaci√≥n previa:</strong> Verifica suficiencia de unidades</li>
                                        <li><strong>Sin d√≠as vac√≠os:</strong> Garantiza m√≠nimo 1 tabla por d√≠a</li>
                                        <li><strong>Ejemplo:</strong> 26 unidades en 26 d√≠as = 1 unidad/d√≠a</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="bi bi-x-circle"></i> Cancelar
                        </button>
                        <button type="submit" class="btn btn-primary" id="btnGenerarDistribucion">
                            <i class="bi bi-rocket"></i> Generar Distribuci√≥n de Unidades
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Modal para ver tablas de distribuci√≥n -->
    <div class="modal fade" id="modalVerTablas" tabindex="-1" aria-labelledby="modalVerTablasLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalVerTablasLabel">
                        <i class="bi bi-table"></i> Tablas de Distribuci√≥n
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="tablasContent" style="max-height: 70vh; overflow-y: auto;">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando tablas...</span>
                        </div>
                        <p class="mt-2">Cargando tablas de distribuci√≥n...</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle"></i> Cerrar
                    </button>
                    <button type="button" class="btn btn-primary" onclick="imprimirTablas()">
                        <i class="bi bi-printer"></i> Imprimir
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de confirmaci√≥n para eliminar -->
    <div class="modal fade" id="modalEliminar" tabindex="-1" aria-labelledby="modalEliminarLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalEliminarLabel">
                        <i class="bi bi-exclamation-triangle text-danger"></i> Confirmar Eliminaci√≥n
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <h6><i class="bi bi-exclamation-triangle"></i> ¬øEst√° seguro que desea eliminar esta distribuci√≥n?</h6>
                        <p class="mb-0">Esta acci√≥n realizar√° las siguientes operaciones:</p>
                        <ul class="mt-2 mb-0">
                            <li><strong>Revertir√° todas las salidas</strong> del inventario</li>
                            <li><strong>Eliminar√° todas las tablas</strong> generadas</li>
                            <li><strong>Restaurar√° las existencias</strong> originales</li>
                            <li><strong>No se puede deshacer</strong> esta operaci√≥n</li>
                        </ul>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle"></i> Cancelar
                    </button>
                    <form method="POST" style="display: inline;">
                        <input type="hidden" name="accion" value="eliminar_distribucion">
                        <input type="hidden" name="distribucion_id" id="distribucion_id_eliminar">
                        <button type="submit" class="btn btn-danger">
                            <i class="bi bi-trash"></i> S√≠, Eliminar Distribuci√≥n
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Variables globales para validaci√≥n
        let validacionTimeout = null;
        let ultimaValidacion = null;

        // **FUNCI√ìN JAVASCRIPT CORREGIDA PARA OBTENER UNIDADES DEL INVENTARIO**
        function obtenerInfoInventarioSimulada(tipoDistribucion) {
            if (tipoDistribucion === 'completo') {
                // Calcular UNIDADES TOTALES del inventario completo
                const totalUnidades = <?php echo array_sum(array_column($productos_con_existencia, 'existencia')); ?>;
                const totalProductos = <?php echo count($productos_con_existencia); ?>;
                
                return {
                    totalProductos: totalProductos,
                    totalUnidades: totalUnidades, // ESTE ES EL VALOR CLAVE - SUMA DE TODAS LAS EXISTENCIAS
                    productosConExistencia: totalProductos
                };
            } else {
                // Calcular UNIDADES SELECCIONADAS en modo parcial
                const cantidades = document.querySelectorAll('.cantidad-parcial');
                let productosSeleccionados = 0;
                let unidadesTotales = 0;
                
                cantidades.forEach(input => {
                    const cantidad = parseInt(input.value) || 0;
                    if (cantidad > 0) {
                        productosSeleccionados++;
                        unidadesTotales += cantidad; // SUMAR LAS UNIDADES SELECCIONADAS
                    }
                });
                
                return {
                    totalProductos: productosSeleccionados,
                    totalUnidades: unidadesTotales, // TOTAL DE UNIDADES SELECCIONADAS
                    productosConExistencia: productosSeleccionados
                };
            }
        }

        // **FUNCI√ìN DE AN√ÅLISIS CORREGIDA - BASADA EN UNIDADES**
        function analizarFactibilidad(diasValidos, inventarioInfo) {
            const totalDias = diasValidos.length;
            const { totalProductos, totalUnidades, productosConExistencia } = inventarioInfo;
            
            if (totalDias <= 0) {
                return {
                    factible: false,
                    tipo: 'error',
                    mensaje: '‚ùå No hay d√≠as v√°lidos para la distribuci√≥n. Verifique las fechas y d√≠as de exclusi√≥n.'
                };
            }

            if (totalUnidades <= 0) {
                return {
                    factible: false,
                    tipo: 'error',
                    mensaje: '‚ùå No hay unidades disponibles para distribuir.'
                };
            }

            // **C√ÅLCULO CORREGIDO: UNIDADES POR D√çA**
            const unidadesPorDia = Math.floor(totalUnidades / totalDias);
            const minimoTablasPorDia = 10;
            const maximoTablasPorDia = 40;
            
            // Verificar si hay al menos 1 unidad por d√≠a
            if (unidadesPorDia < 1) {
                return {
                    factible: false,
                    tipo: 'error',
                    mensaje: `‚ùå UNIDADES INSUFICIENTES:\n‚Ä¢ D√≠as a cubrir: ${totalDias}\n‚Ä¢ Unidades totales: ${totalUnidades.toLocaleString()}\n‚Ä¢ Promedio por d√≠a: ${(totalUnidades/totalDias).toFixed(2)} unidades\n\n‚ö†Ô∏è No hay suficientes unidades para cubrir ni 1 unidad por d√≠a.\n\nüí° Necesita m√≠nimo ${totalDias} unidades (${totalDias - totalUnidades} unidades faltantes).`
                };
            }
            
            // Calcular cu√°ntas tablas se pueden generar por d√≠a
            const tablasPosiblesPorDia = Math.min(maximoTablasPorDia, Math.max(1, unidadesPorDia));
            
            // Verificar si se puede cumplir el objetivo de 10 tablas por d√≠a
            if (tablasPosiblesPorDia < minimoTablasPorDia) {
                // Puede distribuir pero con menos de 10 tablas por d√≠a
                return {
                    factible: true,
                    tipo: 'advertencia',
                    mensaje: `‚ö†Ô∏è DISTRIBUCI√ìN LIMITADA:\n‚Ä¢ D√≠as disponibles: ${totalDias}\n‚Ä¢ Unidades totales: ${totalUnidades.toLocaleString()}\n‚Ä¢ Unidades por d√≠a: ${unidadesPorDia}\n‚Ä¢ M√°ximo ${tablasPosiblesPorDia} tablas por d√≠a (menos de 10 ideales)\n\n‚úÖ FACTIBLE CON LIMITACIONES:\n‚Ä¢ Se cubrir√°n TODOS los ${totalDias} d√≠as\n‚Ä¢ Cada d√≠a tendr√° ${tablasPosiblesPorDia} tabla(s) con productos\n‚Ä¢ Para 10+ tablas/d√≠a necesitar√≠a ${(minimoTablasPorDia * totalDias) - totalUnidades} unidades m√°s`
                };
            }
            
            // Distribuci√≥n √≥ptima factible
            const tablasEstimadas = Math.min(maximoTablasPorDia, Math.max(minimoTablasPorDia, tablasPosiblesPorDia));
            return {
                factible: true,
                tipo: 'exito',
                mensaje: `‚úÖ DISTRIBUCI√ìN √ìPTIMA:\n‚Ä¢ ${totalDias} d√≠as disponibles\n‚Ä¢ ${totalUnidades.toLocaleString()} unidades totales\n‚Ä¢ ${unidadesPorDia} unidades por d√≠a\n‚Ä¢ Estimado: ${tablasEstimadas} tablas por d√≠a\n‚Ä¢ ${totalProductos} productos √∫nicos disponibles\n\nüéØ Cobertura garantizada del 100% con distribuci√≥n equilibrada.`
            };
        }

        // Manejar cambio de tipo de distribuci√≥n
        document.querySelectorAll('input[name="tipo_distribucion"]').forEach(radio => {
            radio.addEventListener('change', function() {
                const productosParcialesDiv = document.getElementById('productos-parciales');
                if (this.value === 'parcial') {
                    productosParcialesDiv.style.display = 'block';
                    actualizarContadorProductosParciales();
                } else {
                    productosParcialesDiv.style.display = 'none';
                }
                // Revalidar cuando cambie el tipo
                validarFactibilidadEnTiempoReal();
            });
        });

        // Actualizar contador de productos seleccionados en modo parcial
        function actualizarContadorProductosParciales() {
            const cantidades = document.querySelectorAll('.cantidad-parcial');
            let productosSeleccionados = 0;
            let unidadesTotales = 0;
            
            cantidades.forEach(input => {
                const cantidad = parseInt(input.value) || 0;
                if (cantidad > 0) {
                    productosSeleccionados++;
                    unidadesTotales += cantidad;
                }
            });
            
            const resumenDiv = document.getElementById('resumen-parcial');
            const countProductos = document.getElementById('productos-seleccionados-count');
            const countUnidades = document.getElementById('unidades-seleccionadas-count');
            
            if (productosSeleccionados > 0) {
                resumenDiv.style.display = 'block';
                countProductos.textContent = productosSeleccionados;
                countUnidades.textContent = unidadesTotales.toLocaleString();
            } else {
                resumenDiv.style.display = 'none';
            }

            // Revalidar factibilidad cuando cambian las cantidades parciales
            validarFactibilidadEnTiempoReal();
        }

        // **FUNCI√ìN DE VALIDACI√ìN EN TIEMPO REAL**
        function validarFactibilidadEnTiempoReal() {
            const fechaInicio = document.getElementById('fecha_inicio').value;
            const fechaFin = document.getElementById('fecha_fin').value;
            const tipoDistribucion = document.querySelector('input[name="tipo_distribucion"]:checked')?.value;
            
            if (!fechaInicio || !fechaFin || !tipoDistribucion) {
                document.getElementById('validacion-preview').style.display = 'none';
                return;
            }

            // Debounce para evitar muchas llamadas
            clearTimeout(validacionTimeout);
            validacionTimeout = setTimeout(() => {
                realizarValidacionFactibilidad(fechaInicio, fechaFin, tipoDistribucion);
            }, 800);
        }

        // Funci√≥n para realizar la validaci√≥n usando JavaScript (simulando el algoritmo PHP)
        function realizarValidacionFactibilidad(fechaInicio, fechaFin, tipoDistribucion) {
            const previewDiv = document.getElementById('validacion-preview');
            const contentDiv = document.getElementById('validacion-content');
            
            // Mostrar loading
            previewDiv.style.display = 'block';
            previewDiv.className = 'validacion-preview';
            contentDiv.innerHTML = '<div class="text-center"><div class="spinner-border spinner-border-sm" role="status"></div> Analizando factibilidad de unidades...</div>';

            // Calcular d√≠as v√°lidos
            const diasExcluidos = [];
            document.querySelectorAll('input[name="dias_exclusion[]"]:checked').forEach(cb => {
                diasExcluidos.push(parseInt(cb.value));
            });

            const diasValidos = calcularDiasValidos(fechaInicio, fechaFin, diasExcluidos);
            
            // Obtener info del inventario (CORREGIDA)
            const inventarioInfo = obtenerInfoInventarioSimulada(tipoDistribucion);
            
            // Realizar an√°lisis (CORREGIDO)
            const analisis = analizarFactibilidad(diasValidos, inventarioInfo);
            
            // Mostrar resultado
            mostrarResultadoValidacion(analisis, previewDiv, contentDiv);
        }

        function calcularDiasValidos(fechaInicio, fechaFin, diasExcluidos) {
            const inicio = new Date(fechaInicio);
            const fin = new Date(fechaFin);
            const diasValidos = [];
            
            let fechaActual = new Date(inicio);
            while (fechaActual <= fin) {
                const diaSemana = fechaActual.getDay();
                if (!diasExcluidos.includes(diaSemana)) {
                    diasValidos.push(new Date(fechaActual));
                }
                fechaActual.setDate(fechaActual.getDate() + 1);
            }
            
            return diasValidos;
        }

        function mostrarResultadoValidacion(analisis, previewDiv, contentDiv) {
            let claseCSS = 'validacion-preview ';
            let icono = '';
            
            switch (analisis.tipo) {
                case 'exito':
                    claseCSS += 'factible';
                    icono = '‚úÖ';
                    break;
                case 'advertencia':
                    claseCSS += 'advertencia';
                    icono = '‚ö†Ô∏è';
                    break;
                case 'error':
                    claseCSS += 'no-factible';
                    icono = '‚ùå';
                    break;
            }
            
            previewDiv.className = claseCSS;
            contentDiv.innerHTML = `
                <div class="d-flex align-items-start">
                    <div class="me-3" style="font-size: 1.5em;">${icono}</div>
                    <div>
                        <h6>An√°lisis de Factibilidad de Unidades</h6>
                        <pre style="white-space: pre-wrap; font-family: inherit; margin: 0;">${analisis.mensaje}</pre>
                    </div>
                </div>
            `;

            // Habilitar/deshabilitar bot√≥n seg√∫n factibilidad
            const btnGenerar = document.getElementById('btnGenerarDistribucion');
            if (analisis.factible) {
                btnGenerar.disabled = false;
                btnGenerar.innerHTML = '<i class="bi bi-rocket"></i> Generar Distribuci√≥n de Unidades';
            } else {
                btnGenerar.disabled = true;
                btnGenerar.innerHTML = '<i class="bi bi-x-circle"></i> Unidades Insuficientes';
            }
        }

        // Eventos para activar validaci√≥n en tiempo real
        document.getElementById('fecha_inicio').addEventListener('change', validarFactibilidadEnTiempoReal);
        document.getElementById('fecha_fin').addEventListener('change', validarFactibilidadEnTiempoReal);
        document.querySelectorAll('input[name="dias_exclusion[]"]').forEach(cb => {
            cb.addEventListener('change', validarFactibilidadEnTiempoReal);
        });

        // Agregar eventos a las cantidades parciales
        document.querySelectorAll('.cantidad-parcial').forEach(input => {
            input.addEventListener('input', actualizarContadorProductosParciales);
        });

        // Validaci√≥n y env√≠o del formulario
        document.getElementById('formDistribucion').addEventListener('submit', function(e) {
            const fechaInicio = new Date(document.getElementById('fecha_inicio').value);
            const fechaFin = new Date(document.getElementById('fecha_fin').value);
            const tipoDistribucion = document.querySelector('input[name="tipo_distribucion"]:checked').value;
            
            // Validar fechas
            if (fechaInicio >= fechaFin) {
                e.preventDefault();
                alert('‚ùå Error: La fecha de fin debe ser posterior a la fecha de inicio.');
                return false;
            }
            
            // Si es distribuci√≥n parcial, validar que tenga unidades suficientes
            if (tipoDistribucion === 'parcial') {
                const cantidades = document.querySelectorAll('input[name="cantidades_parciales[]"]');
                let hayProductos = false;
                let totalUnidades = 0;
                
                cantidades.forEach(input => {
                    const cantidad = parseInt(input.value) || 0;
                    if (cantidad > 0) {
                        hayProductos = true;
                        totalUnidades += cantidad;
                    }
                });
                
                if (!hayProductos) {
                    e.preventDefault();
                    alert('‚ùå Error: Debe seleccionar al menos un producto con cantidad mayor a 0.');
                    return false;
                }
                
                const diasSeleccionados = calcularDiasSeleccionados();
                if (totalUnidades < diasSeleccionados) {
                    if (!confirm(`‚ö†Ô∏è Solo seleccion√≥ ${totalUnidades} unidades para ${diasSeleccionados} d√≠as. Esto significa menos de 1 unidad por d√≠a. ¬øEst√° seguro que desea continuar?`)) {
                        e.preventDefault();
                        return false;
                    }
                }
            }
            
            // Verificar si la validaci√≥n indica que no es factible
            const btnGenerar = document.getElementById('btnGenerarDistribucion');
            if (btnGenerar.disabled) {
                e.preventDefault();
                alert('‚ùå No se puede generar la distribuci√≥n. Revise el an√°lisis de factibilidad y corrija los problemas identificados.');
                return false;
            }
            
            // Confirmar la acci√≥n con informaci√≥n detallada
            const diasSeleccionados = calcularDiasSeleccionados();
            const inventarioInfo = obtenerInfoInventarioSimulada(tipoDistribucion);
            
            let confirmMsg = '';
            
            if (tipoDistribucion === 'completo') {
                confirmMsg = `üéØ ¬øConfirmar distribuci√≥n de TODAS las unidades del inventario?\n\n` +
                           `üìä Resumen:\n` +
                           `‚Ä¢ ${inventarioInfo.totalUnidades.toLocaleString()} unidades totales a distribuir\n` +
                           `‚Ä¢ ${diasSeleccionados} d√≠as v√°lidos de distribuci√≥n\n` +
                           `‚Ä¢ Promedio: ${Math.floor(inventarioInfo.totalUnidades / diasSeleccionados)} unidades por d√≠a\n` +
                           `‚Ä¢ Cobertura garantizada del 100% de los d√≠as\n\n` +
                           `‚ö†Ô∏è Esta operaci√≥n NO se puede deshacer.`;
            } else {
                confirmMsg = `üìã ¬øConfirmar distribuci√≥n de unidades SELECCIONADAS?\n\n` +
                           `üìä Resumen:\n` +
                           `‚Ä¢ ${inventarioInfo.totalProductos} productos seleccionados\n` +
                           `‚Ä¢ ${inventarioInfo.totalUnidades.toLocaleString()} unidades totales\n` +
                           `‚Ä¢ ${diasSeleccionados} d√≠as v√°lidos\n` +
                           `‚Ä¢ Promedio: ${Math.floor(inventarioInfo.totalUnidades / diasSeleccionados)} unidades por d√≠a\n\n` +
                           `‚ö†Ô∏è Esta operaci√≥n NO se puede deshacer.`;
            }
                
            if (!confirm(confirmMsg)) {
                e.preventDefault();
                return false;
            }
            
            // Mostrar indicador de carga
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Distribuyendo Unidades...';
            submitBtn.disabled = true;
            
            // Restaurar bot√≥n despu√©s de 45 segundos por si hay error
            setTimeout(() => {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }, 45000);
        });

        // Funci√≥n para calcular d√≠as seleccionados
        function calcularDiasSeleccionados() {
            const fechaInicio = new Date(document.getElementById('fecha_inicio').value);
            const fechaFin = new Date(document.getElementById('fecha_fin').value);
            const diasExcluidos = [];
            
            // Obtener d√≠as excluidos
            document.querySelectorAll('input[name="dias_exclusion[]"]:checked').forEach(checkbox => {
                diasExcluidos.push(parseInt(checkbox.value));
            });
            
            let count = 0;
            let fechaActual = new Date(fechaInicio);
            
            while (fechaActual <= fechaFin) {
                const diaSemana = fechaActual.getDay();
                if (!diasExcluidos.includes(diaSemana)) {
                    count++;
                }
                fechaActual.setDate(fechaActual.getDate() + 1);
            }
            
            return count;
        }

        // Ver tablas de distribuci√≥n
        function verTablas(distribucionId) {
            const modal = new bootstrap.Modal(document.getElementById('modalVerTablas'));
            modal.show();
            
            fetch(`get_tablas_distribucion.php?id=${distribucionId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Mostrar tablas cargadas
                        document.getElementById('tablasContent').innerHTML = "Tablas de distribuci√≥n cargadas correctamente...";
                    } else {
                        document.getElementById('tablasContent').innerHTML = `
                            <div class="alert alert-danger">
                                <i class="bi bi-exclamation-triangle"></i> Error al cargar las tablas: ${data.message}
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById('tablasContent').innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-wifi-off"></i> Error de conexi√≥n al cargar las tablas.
                        </div>
                    `;
                });
        }

        // Eliminar distribuci√≥n
        function eliminarDistribucion(id) {
            document.getElementById('distribucion_id_eliminar').value = id;
            const modal = new bootstrap.Modal(document.getElementById('modalEliminar'));
            modal.show();
        }

        // Imprimir tablas
        function imprimirTablas() {
            window.print();
        }

        // Configuraci√≥n inicial al cargar la p√°gina
        document.addEventListener('DOMContentLoaded', function() {
            const hoy = new Date();
            const fechaHoy = hoy.toISOString().split('T')[0];
            
            document.getElementById('fecha_inicio').value = fechaHoy;
            document.getElementById('fecha_fin').value = fechaHoy;
            document.getElementById('fecha_inicio').min = fechaHoy;
            document.getElementById('fecha_fin').min = fechaHoy;

            // Realizar validaci√≥n inicial
            setTimeout(() => {
                validarFactibilidadEnTiempoReal();
            }, 1000);
        });

        // Actualizar fecha m√≠nima de fin cuando cambia fecha de inicio
        document.getElementById('fecha_inicio').addEventListener('change', function() {
            const fechaInicio = this.value;
            const fechaFinInput = document.getElementById('fecha_fin');
            
            fechaFinInput.min = fechaInicio;
            if (fechaFinInput.value < fechaInicio) {
                fechaFinInput.value = fechaInicio;
            }
        });

        // Mejorar experiencia del usuario con feedback visual en productos parciales
        document.querySelectorAll('.cantidad-parcial').forEach(input => {
            input.addEventListener('input', function() {
                const max = parseInt(this.max);
                const value = parseInt(this.value) || 0;
                
                if (value > max) {
                    this.value = max;
                    this.classList.add('is-invalid');
                    setTimeout(() => this.classList.remove('is-invalid'), 2000);
                } else if (value > 0) {
                    this.classList.add('is-valid');
                    setTimeout(() => this.classList.remove('is-valid'), 1000);
                }
                
                actualizarContadorProductosParciales();
            });

            // Agregar eventos para validaci√≥n en tiempo real
            input.addEventListener('change', function() {
                setTimeout(() => {
                    validarFactibilidadEnTiempoReal();
                }, 100);
            });
        });

        // Limpiar formulario al cerrar modal
        document.getElementById('modalDistribucion').addEventListener('hidden.bs.modal', function () {
            document.getElementById('formDistribucion').reset();
            document.getElementById('productos-parciales').style.display = 'none';
            document.getElementById('resumen-parcial').style.display = 'none';
            document.getElementById('validacion-preview').style.display = 'none';
            document.getElementById('completo').checked = true;
            
            // Resetear todas las cantidades parciales a 0
            document.querySelectorAll('.cantidad-parcial').forEach(input => {
                input.value = 0;
            });
            
            // Restaurar bot√≥n de submit
            const submitBtn = document.querySelector('#formDistribucion button[type="submit"]');
            submitBtn.innerHTML = '<i class="bi bi-rocket"></i> Generar Distribuci√≥n de Unidades';
            submitBtn.disabled = false;
            
            // Limpiar validaci√≥n
            ultimaValidacion = null;
            clearTimeout(validacionTimeout);
        });

        // Funci√≥n para destacar d√≠as de la semana con colores
        function destacarDiasExcluidos() {
            document.querySelectorAll('input[name="dias_exclusion[]"]').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const label = this.nextElementSibling;
                    if (this.checked) {
                        label.style.color = '#dc3545';
                        label.style.fontWeight = 'bold';
                    } else {
                        label.style.color = '';
                        label.style.fontWeight = '';
                    }
                });
            });
        }

        // Inicializar funciones adicionales
        destacarDiasExcluidos();

        // Validaci√≥n final antes del env√≠o para asegurar que todo est√© correcto
        window.addEventListener('beforeunload', function() {
            // Limpiar timeouts pendientes
            if (validacionTimeout) {
                clearTimeout(validacionTimeout);
            }
        });

        // Funci√≥n adicional para mostrar informaci√≥n de ayuda
        function mostrarAyudaUnidades() {
            alert(`üéØ DISTRIBUCI√ìN POR UNIDADES - AYUDA:

üìä C√≥mo funciona:
‚Ä¢ El sistema cuenta las UNIDADES REALES de existencia
‚Ä¢ NO cuenta productos √∫nicos, sino sus cantidades
‚Ä¢ Ejemplo: 1 producto con 26 unidades = 26 unidades totales

üìà Distribuci√≥n:
‚Ä¢ Las unidades se dividen entre los d√≠as disponibles
‚Ä¢ Cada d√≠a tendr√° al menos 1 tabla con productos
‚Ä¢ El sistema garantiza que ning√∫n d√≠a quede vac√≠o

‚ö†Ô∏è Validaciones:
‚Ä¢ Si hay 26 unidades para 30 d√≠as = NO factible
‚Ä¢ Si hay 100 unidades para 26 d√≠as = S√ç factible (3-4 unidades por d√≠a)
‚Ä¢ El sistema te avisa antes de ejecutar

‚úÖ Garant√≠as:
‚Ä¢ 100% de cobertura de d√≠as seleccionados
‚Ä¢ Distribuci√≥n equilibrada de unidades
‚Ä¢ Alertas tempranas de problemas`);
        }

        // Agregar bot√≥n de ayuda si se necesita
        const helpButton = document.createElement('button');
        helpButton.type = 'button';
        helpButton.className = 'btn btn-outline-info btn-sm';
        helpButton.innerHTML = '<i class="bi bi-question-circle"></i> Ayuda';
        helpButton.onclick = mostrarAyudaUnidades;
        
        // Agregar el bot√≥n de ayuda al header del modal si se desea
        // document.querySelector('.modal-header').appendChild(helpButton);
    </script>
</body>
</html>